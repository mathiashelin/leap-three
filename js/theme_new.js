// Generated by CoffeeScript 1.6.3
(function() {
  var DefaultTheme, SpecificTheme, Theme, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Theme = (function() {
    Theme.events = function(events) {
      var _base;
      if ((_base = this.prototype).events == null) {
        _base.events = {};
      }
      if (!this.prototype.hasOwnProperty("events")) {
        this.prototype.events = $.extend({}, this.prototype.events);
      }
      return this.prototype.events = $.extend(true, {}, this.prototype.events, events);
    };

    Theme.onDomReady = function(initializers) {
      var initializer, _base, _i, _len, _results;
      if ((_base = this.prototype).onDomReady == null) {
        _base.onDomReady = [];
      }
      if (!this.prototype.hasOwnProperty("onDomReady")) {
        this.prototype.onDomReady = this.prototype.onDomReady.slice(0);
      }
      _results = [];
      for (_i = 0, _len = initializers.length; _i < _len; _i++) {
        initializer = initializers[_i];
        _results.push(this.prototype.onDomReady.push(initializer));
      }
      return _results;
    };

    function Theme() {
      this._setupEventListeners = __bind(this._setupEventListeners, this);
      this._setupEventListeners();
    }

    Theme.prototype.domReady = function() {
      return this._loadOnDomReadyMethods();
    };

    Theme.prototype._loadOnDomReadyMethods = function() {
      var callback, _i, _len, _ref, _results;
      _ref = this.onDomReady;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(this[callback]());
      }
      return _results;
    };

    Theme.prototype._setupEventListeners = function() {
      var $document, action, actions, callback, selector, _ref, _results;
      $document = $(document);
      _ref = this.events;
      _results = [];
      for (selector in _ref) {
        actions = _ref[selector];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (action in actions) {
            callback = actions[action];
            _results1.push($document.on(action, selector, this[callback]));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Theme;

  })();

  DefaultTheme = (function(_super) {
    __extends(DefaultTheme, _super);

    function DefaultTheme() {
      _ref = DefaultTheme.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DefaultTheme.events;

    DefaultTheme.onDomReady([]);

    return DefaultTheme;

  })(Theme);

  SpecificTheme = (function(_super) {
    __extends(SpecificTheme, _super);

    function SpecificTheme() {
      _ref1 = SpecificTheme.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    SpecificTheme.events;

    SpecificTheme.onDomReady(['drawGlobe']);

    SpecificTheme.prototype.drawGlobe = function() {
      var camera, deg, ground, groundGeometry, groundMaterial, light, pi, radius, renderer, rings, scene, segments, sphere, sphereGeometry, sphereMaterial, spotLight;
      renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMapEnabled = true;
      document.body.appendChild(renderer.domElement);
      pi = Math.PI;
      deg = pi / 180;
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      light = new THREE.AmbientLight(0x888888);
      scene.add(light);
      light = new THREE.DirectionalLight(0xCCCCCC, 1);
      light.position.set(5, 4, 5);
      scene.add(light);
      spotLight = new THREE.SpotLight(0xFFFFFF, 1, 1, 45 * deg);
      spotLight.position.set(0, 7, 0);
      spotLight.shadowCameraNear = 0.01;
      spotLight.castShadow = true;
      spotLight.shadowDarkness = 0.8;
      scene.add(spotLight);
      groundGeometry = new THREE.PlaneGeometry(8, 4, 100, 100);
      groundMaterial = new THREE.MeshPhongMaterial();
      ground = new THREE.Mesh(groundGeometry, groundMaterial);
      ground.rotation.y = 0;
      ground.rotation.x = -90 * deg;
      ground.rotation.z = 0;
      ground.receiveShadow = true;
      scene.add(ground);
      sphereMaterial = new THREE.MeshPhongMaterial();
      radius = 0.5;
      segments = 128;
      rings = 128;
      sphereGeometry = new THREE.SphereGeometry(radius, segments, rings);
      sphereMaterial.map = THREE.ImageUtils.loadTexture('images/earthmap1k.jpg');
      sphereMaterial.bumpMap = THREE.ImageUtils.loadTexture('images/earthbump1k.jpg');
      sphereMaterial.bumpScale = 0.05;
      sphereMaterial.specularMap = THREE.ImageUtils.loadTexture('images/earthspec1k.jpg');
      sphereMaterial.specular = new THREE.Color('grey');
      sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
      sphere.castShadow = true;
      sphere.receiveShadow = false;
      scene.add(sphere);
      camera.position.set(0, 2, 4);
      return Leap.loop(function(frame) {
        var hand, offsetX, offsetY, offsetZ, posY, rotX, rotZ, _i, _len, _ref2;
        if (frame.pointables.length > 1) {
          _ref2 = frame.hands;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            hand = _ref2[_i];
            rotX = -hand.palmNormal[2] * 2;
            rotZ = hand.palmNormal[0] * 2;
            radius = hand.sphereRadius / 50;
            offsetX = hand.palmPosition[0] / 100;
            offsetY = hand.palmPosition[1] / 100;
            offsetZ = hand.palmPosition[2] / 100;
            sphere.rotation.set(rotX, 0, rotZ);
            sphere.position.set(offsetX, offsetY, offsetZ);
          }
        } else {
          sphere.rotation.y += 0.01;
          posY = sphere.position.y;
          if (posY > 0.5) {
            posY -= 0.01;
          } else {
            posY = 0.5;
          }
          sphere.position.y = posY;
        }
        return renderer.render(scene, camera);
      });
    };

    return SpecificTheme;

  })(DefaultTheme);

  SpecificTheme.current = new SpecificTheme();

  $(function() {
    return SpecificTheme.current.domReady();
  });

  window.SpecificTheme = SpecificTheme;

}).call(this);
